{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"microservices-bootcamp (Chapter-wise)","text":""},{"location":"#part-1-foundations-of-microservices","title":"Part 1: Foundations of Microservices","text":"Module Topic Learning Objectives 1.1 Introduction to Microservices - What are Microservices?- Monolith vs Microservices- Benefits and Challenges 1.2 Core Principles of Microservices - Single Responsibility Principle- SOLID and Design Principles- Decentralization- Scalability and Autonomy- API Contracts 1.3 Designing Microservices - Bounded Context- Domain-Driven Design (DDD)- Service Granularity- Designing APIs (REST, gRPC, GraphQL) 1.4 Communication Patterns - Synchronous (REST/gRPC/graphQL)- Asynchronous (message queues, events) 1.5 Service Contracts - API-first Approach- OpenAPI/Swagger/Scalar- Backward Compatibility 1.6 Setting up Development Environment - Tools &amp; IDEs- Docker and Containers- Git Repositories- Branching Strategy"},{"location":"#part-2-building-microservices","title":"Part 2: Building Microservices","text":"Module Topic Learning Objectives 2.1 Tech Stack - Overview of Tech Choices- .NET Core, Spring Boot, Node.js, etc. 2.2 API Development - REST/gRPC APIs- Build APIs with ASP.NET Core 2.3 Data Access Layer - EF Core- CRUD Operations 2.4 Event-Driven Architecture - Event Sourcing- Messaging (RabbitMQ, Kafka, Azure Service Bus)- Publishing/Consuming Events 2.5 Data Management - Database-per-service- CQRS- Eventual Consistency 2.6 Service Discovery - Eureka, Consul, K8s DNS- Registering and Discovering Services 2.7 Configuration Management - AppSettings, YAML, Consul- Centralized Configuration- Azure App Configuration 2.8 Testing Microservices - Unit, Integration, Contract Testing- Pact- TestContainers"},{"location":"#part-3-cross-cutting-concerns-patterns","title":"Part 3: Cross-Cutting Concerns &amp; Patterns","text":"Module Topic Learning Objectives 3.1 Resilience &amp; Fault Tolerance - Circuit Breaker- Retry- Timeout- Polly- Dapr 3.2 API Gateway Pattern - API Gateway- YARP- Ocelot- Azure API Management 3.3 Security - OAuth2- OpenID Connect- Identity Server- Auth0- Role/Policy-based Access 3.4 Logging &amp; Monitoring - Centralized Logging- Observability- Serilog- Seq- ELK- OpenTelemetry 3.5 Caching - Distributed Caching- Redis- Cache Invalidation Strategies 3.6 Service Mesh (Optional) - Istio- Linkerd- Consul Connect- Introduction"},{"location":"#part-4-devops-deployment","title":"Part 4: DevOps &amp; Deployment","text":"Module Topic Learning Objectives 4.1 Dockerizing - Dockerfiles- Run containers locally 4.2 Docker Compose - Orchestration- Multiple microservices for local development 4.3 Kubernetes Basics - AKS, GKE, EKS- Deploy microservices 4.4 CI/CD Pipelines - GitHub Actions- Azure DevOps- Build \u2192 Test \u2192 Deploy- Canary, Blue-Green Deployment 4.5 Secrets &amp; Config - ConfigMaps- Secrets- Key Vault- Secure configuration in Kubernetes 4.6 Monitoring &amp; Observability - Prometheus- Grafana- Fluentd- Loki- Metrics- Health Checks- Alerts- Logging"},{"location":"#part-5-advanced-topics-case-study","title":"Part 5: Advanced Topics &amp; Case Study","text":"Module Topic Learning Objectives 5.1 Securing Microservices - API Security Best Practices- Rate Limiting- Secrets Management (Vault, Azure Key Vault) 5.2 Anti-Patterns - Common Mistakes- Avoid Tight Coupling- Saga Pattern- Other Design Patterns 5.3 AI/ML in Microservices - AI-Powered Microservices- Model Serving and Integration 5.4 Real-World Case Study - End-to-End Implementation- Design and implement a microservice-based application 5.5 Interview Prep &amp; Review - System Design Patterns- Architecture reviews 5.6 Final Thoughts &amp; Trends - Serverless- Multi-cloud- Azure Functions- Multi-cloud Deployments"},{"location":"part1/1.1-Introduction/","title":"Part 1: Foundations of Microservices","text":""},{"location":"part1/1.1-Introduction/#11-introduction-to-microservices","title":"1.1 Introduction to Microservices","text":""},{"location":"part1/1.1-Introduction/#what-is-microservices","title":"\ud83d\ude80 What is Microservices","text":"<p>Microservices is an architectural style where an application is broken down into a collection of small, autonomous services, each responsible for a specific business capability.</p> <p>Each microservice:</p> <ul> <li>Runs in its own process.</li> <li>Is independently developed, deployed, and scaled.</li> <li>Communicates with other services via lightweight protocols like HTTP/REST, gRPC, or messaging (e.g., Kafka, RabbitMQ).</li> </ul>"},{"location":"part1/1.1-Introduction/#when-to-use-microservices","title":"\u2705 When to Use Microservices?","text":"<p>Use Microservices when:</p> <ul> <li>Your application is large and complex.</li> <li>You want to enable independent team development and deployment.</li> <li>Different parts of your system have different scaling needs.</li> <li>You want to improve fault isolation \u2014 failure in one service doesn't crash the whole system.</li> <li>You're adopting DevOps, CI/CD, containerization (Docker), or cloud-native development.</li> <li>You have long release cycles or tight coupling in your monolithic system.</li> </ul>"},{"location":"part1/1.1-Introduction/#avoid-microservices-when","title":"\u274c Avoid Microservices When:","text":"<p>Avoid Microservices if:</p> <ul> <li>Your application is small or simple.</li> <li>Your team is small \u2014 microservices add operational overhead.</li> <li>You don\u2019t have solid DevOps, CI/CD, monitoring, and automation in place.</li> <li>You need tight consistency across components (microservices prefer eventual consistency).</li> <li>You're not ready to handle complex inter-service communication and distributed system challenges.</li> <li>You need to move fast early in development \u2014 monoliths are faster to build initially.</li> </ul> <p> (source:https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/microservices)</p>"},{"location":"part1/1.1-Introduction/#key-differences-architecture-pattern-vs-design-pattern-vs-architecture-style","title":"\ud83e\udde0 Key Differences: Architecture Pattern vs Design Pattern vs Architecture Style","text":"Concept Definition Scope Example(s) Architecture Style A broad, high-level approach to organizing a system's structure. System-wide Layered, Client-Server, Microservices, Serverless Architecture Pattern A solution template for organizing components and their interactions in a system. High-level structure Clean Architecture, Onion Architecture, Hexagonal (Ports &amp; Adapters), Event-Driven Design Pattern A reusable solution to common problems in object-oriented design. Code-level Singleton, Factory, Strategy, Mediator, Repository <p> (source:https://www.codeproject.com/Articles/5273373/Whiteapp-ASP-NET-Core-using-Onion-Architecture)</p>"},{"location":"part1/1.1-Introduction/#simple-explanation","title":"\ud83d\udd0d Simple Explanation:","text":"<ul> <li>Architecture Style is like the blueprint theme for your building (e.g., colonial, modern).</li> <li>Architecture Pattern is the layout inside the building (where the rooms and walls go).</li> <li>Design Pattern is about the furniture arrangement and how parts inside a room interact.</li> </ul>"},{"location":"part1/1.1-Introduction/#when-to-use-each","title":"\ud83e\udde9 When to use each?","text":"<ul> <li>Use Architecture Styles to choose your system structure (e.g., microservices vs monolith).</li> <li>Use Architecture Patterns to organize services and modules (e.g., clean separation of concerns).</li> <li>Use Design Patterns to solve specific coding problems (e.g., reduce coupling between objects).</li> </ul>"},{"location":"part1/1.1-Introduction/#monolith-vs-microservices","title":"\ud83c\udfd7\ufe0f Monolith vs Microservices","text":"Aspect Monolithic Architecture Microservices Architecture Definition A single, unified application where all components are tightly coupled. An application built as a collection of small, independent services. Deployment Entire application is deployed together. Each service is deployed independently. Scalability Scales as a whole unit. Individual services can be scaled independently. Development Easier to develop initially, especially for small teams. Allows parallel development by different teams. Technology Stack Typically uses a single stack (e.g., .NET, Java). Services can use different stacks (polyglot). Communication Function/method calls within one app. Lightweight protocols (HTTP, REST, gRPC, messaging). Data Management Often uses a single shared database. Each service owns its own database (database per service). Testing Easier to test end-to-end. Requires service-level testing, mocking, integration testing. Maintenance Can become hard to maintain as the codebase grows. Easier to maintain and update individual services. Failure Isolation A bug in one part can crash the whole system. Failure in one service doesn\u2019t affect others (better resilience). Deployment Speed Slower, entire app must be redeployed for changes. Faster, deploy only the changed service. Best For Small to medium applications or early-stage projects. Large, complex, or enterprise systems requiring scalability."},{"location":"part1/1.1-Introduction/#summary","title":"\ud83e\udde0 Summary:","text":"<ul> <li>Use Monolith when you're building something simple, fast, or in the early stage.</li> <li>Use Microservices when your system grows, and you need scalability, team independence, and faster deployments.</li> </ul>"},{"location":"part1/1.2-Core-Principles-of-Microservices/","title":"1.2 Core Principles of Microservices","text":""},{"location":"part1/1.2-Core-Principles-of-Microservices/#solid-principles","title":"\ud83e\uddf1 SOLID Principles","text":"<p>SOLID is a set of 5 design principles that help make your software easy to understand, flexible, and maintainable.</p> Principle Name Simple Meaning S Single Responsibility Principle (SRP) A class should do only one job. Don't mix responsibilities. O Open/Closed Principle (OCP) Software should be open for extension, but closed for modification. Add new code without changing old code. L Liskov Substitution Principle (LSP) A subclass should behave like its parent. Replacing the parent with a child should not break the app. I Interface Segregation Principle (ISP) Don't force a class to implement unneeded methods. Use small, specific interfaces. D Dependency Inversion Principle (DIP) Code should depend on abstractions, not on concrete implementations. Use interfaces instead of tightly coupled classes. <p></p>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#other-common-design-principles","title":"\u2705 Other Common Design Principles","text":"Principle Meaning DRY (Don't Repeat Yourself) Don\u2019t copy-paste code. Reuse logic through functions, classes, etc. KISS (Keep It Simple, Stupid) Keep your code simple and avoid unnecessary complexity. YAGNI (You Ain\u2019t Gonna Need It) Don\u2019t build something until you actually need it. Separation of Concerns (SoC) Keep different parts of the system separate. UI, logic, and data should be in different layers. Composition over Inheritance Prefer combining small objects over using large class hierarchies."},{"location":"part1/1.2-Core-Principles-of-Microservices/#why-are-these-important","title":"\ud83c\udfaf Why are these important?","text":"<p>These principles help you:</p> <ul> <li>Write clean, testable, and maintainable code.</li> <li>Reduce bugs, duplication, and tight coupling.</li> <li>Make your app more flexible to change.</li> </ul>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#decentralization-in-microservices","title":"\ud83e\udded Decentralization in Microservices","text":"<p>Decentralization means that each microservice manages its own logic, data, and decisions, rather than relying on a central system to control everything.</p>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#what-it-means","title":"\u2705 What it means:","text":"<ul> <li>No central brain: Each service is independent and doesn\u2019t wait for a \"master service\" to tell it what to do.</li> <li>Own database: Each service has its own database, instead of sharing one big database.</li> <li>Own responsibilities: Each service handles its own tasks, rules, and errors.</li> </ul>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#example","title":"\ud83d\udce6 Example:","text":"<ul> <li>In a monolithic app, a central module might handle all payments.</li> <li>In microservices, the payment service does everything related to payments, including rules, storing data, and processing \u2014 without needing other services to do it for it.</li> </ul>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#why-it-matters","title":"\ud83c\udfaf Why it matters:","text":"<ul> <li>Reduces tight coupling.</li> <li>Increases autonomy and scalability.</li> <li>Teams can work independently.</li> <li>Services can be deployed or updated without affecting others.</li> </ul>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#scalability-and-autonomy-in-microservices","title":"\ud83d\udcc8 Scalability and Autonomy in Microservices","text":""},{"location":"part1/1.2-Core-Principles-of-Microservices/#scalability-in-microservices","title":"\ud83d\ude80 Scalability in Microservices","text":"<p>Scalability means the ability of your system to handle more load (users, data, traffic) by adding more resources.</p>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#in-microservices","title":"\u2705 In Microservices:","text":"<ul> <li>You can scale only the service that needs more resources, not the whole application.</li> <li>Example: If the \"Order Service\" is getting more traffic than others, you can deploy more instances of just that service.</li> </ul>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#types-of-scalability","title":"\ud83d\udd27 Types of Scalability:","text":"<ul> <li>Horizontal scaling \u2013 Add more service instances (most common).</li> <li>Vertical scaling \u2013 Give more CPU/RAM to existing instances (limited and expensive).</li> </ul>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#autonomy-in-microservices","title":"\ud83e\udde0 Autonomy in Microservices","text":"<p>Autonomy means each microservice is independent and can make decisions, run, and be deployed on its own.</p>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#in-microservices_1","title":"\u2705 In Microservices:","text":"<ul> <li>Services have their own code, data, and logic.</li> <li>Teams can build, test, and deploy their services without coordinating with others.</li> <li>Example: The \"Payment Service\" doesn\u2019t need the \"User Service\" to function or deploy.</li> </ul> <p> (source:https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/microservices)</p>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#benefits","title":"\ud83c\udfaf Benefits:","text":"Aspect Benefit Scalability Efficient use of resources, performance under high load. Autonomy Faster development, independent deployments, fewer dependencies."},{"location":"part1/1.2-Core-Principles-of-Microservices/#api-contracts-in-microservices","title":"\ud83d\udcc4 API Contracts in Microservices","text":""},{"location":"part1/1.2-Core-Principles-of-Microservices/#what-is-an-api-contract","title":"\ud83e\uddfe What is an API Contract?","text":"<p>An API Contract is a written agreement (or definition) between microservices that defines:</p> <ul> <li>What endpoints are available (<code>/orders</code>, <code>/users</code>)</li> <li>What data to send (request)</li> <li>What data to expect back (response)</li> <li>What status codes might be returned</li> </ul> <p>It\u2019s like a mutual promise between services:</p> <p>\u201cIf you call me like this, I will respond like that.\u201d</p>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#why-api-contracts-are-important","title":"\ud83e\udd1d Why API Contracts Are Important","text":"<p>In Microservices:</p> <ul> <li>Services are independent.</li> <li>They talk via APIs (e.g., REST, gRPC, messaging).</li> <li>You need a clear contract to ensure they communicate correctly.</li> </ul>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#example-simple-rest-contract","title":"\ud83d\udce6 Example (Simple REST Contract)","text":"<p>Order Service API Contract:</p> Method Endpoint Request Body Response Body POST <code>/orders</code> <code>{ \"productId\": 1, \"qty\": 2 }</code> <code>{ \"orderId\": 123 }</code> GET <code>/orders/123</code> \u2014 <code>{ \"orderId\": 123, \"status\": \"Shipped\" }</code> <p>This tells consumers (like UI or another service) what to send and what to expect.</p>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#tools-for-api-contracts","title":"\ud83d\udee0 Tools for API Contracts","text":"<ul> <li>OpenAPI / Swagger \u2013 For REST APIs</li> <li>gRPC Protobufs \u2013 For gRPC APIs</li> <li>AsyncAPI \u2013 For message-based communication</li> <li>Postman / Stoplight \u2013 For testing and documenting contracts</li> <li>Pact \u2013 For contract testing between services</li> </ul>"},{"location":"part1/1.2-Core-Principles-of-Microservices/#benefits_1","title":"\u2705 Benefits","text":"<ul> <li>Clear communication between services</li> <li>Early validation of integrations</li> <li>Safer changes (breaking changes are avoided)</li> <li>Contract testing ensures compatibility</li> </ul>"},{"location":"part1/1.3-Designing-Microservices/","title":"Designing Microservices","text":""},{"location":"part1/1.3-Designing-Microservices/#what-is-a-bounded-context","title":"\u2705 What is a Bounded Context?","text":"<p>A Bounded Context is a clear boundary within your system where a specific meaning of data and terms is valid.</p> <p>Think of it like this:</p> <p>The same word can mean different things in different departments \u2014 and that\u2019s okay, as long as each department (context) is kept separate.</p>"},{"location":"part1/1.3-Designing-Microservices/#_1","title":"Designing Microservices","text":""},{"location":"part1/1.3-Designing-Microservices/#example","title":"\ud83d\udd0d Example:","text":"<ul> <li> <p>In an eCommerce system:</p> </li> <li> <p>In the Order context, \u201cCustomer\u201d means someone who places an order.</p> </li> <li>In the Support context, \u201cCustomer\u201d means someone who raised a ticket.</li> </ul> <p>They both use the word Customer, but their behavior and data are different.</p>"},{"location":"part1/1.3-Designing-Microservices/#why-it-matters","title":"\ud83e\udde0 Why it matters?","text":"<ul> <li>Helps teams avoid confusion and conflicts.</li> <li>Each context can evolve independently.</li> <li>It's a key concept in Domain-Driven Design (DDD) and microservices.</li> </ul>"},{"location":"part1/1.3-Designing-Microservices/#what-is-domain-driven-design-ddd","title":"\u2705 What is Domain-Driven Design (DDD)?","text":"<p>Domain-Driven Design (DDD) is a way of building software that focuses on the real-world problem (domain) your software is trying to solve \u2014 and involves close collaboration with domain experts.</p>"},{"location":"part1/1.3-Designing-Microservices/#_2","title":"Designing Microservices","text":""},{"location":"part1/1.3-Designing-Microservices/#definition","title":"\ud83d\udd0d Definition:","text":"<p>DDD is about designing your software based on the business, not just the technology.</p>"},{"location":"part1/1.3-Designing-Microservices/#key-ideas","title":"\ud83e\uddf1 Key Ideas:","text":"<ol> <li>Domain \u2013 The area your software is solving (e.g., banking, e-commerce, healthcare).</li> <li>Entities \u2013 Things that have an identity (like <code>Customer</code>, <code>Order</code>).</li> <li>Value Objects \u2013 Objects that don\u2019t have identity, only value (like <code>Address</code>, <code>Money</code>).</li> <li>Aggregates \u2013 A group of objects treated as one unit (like <code>Order</code> with <code>OrderItems</code>).</li> <li>Repositories \u2013 Interfaces to fetch and store aggregates.</li> <li>Services \u2013 Business logic that doesn't naturally fit in an entity/value object.</li> <li>Bounded Context \u2013 A clearly defined boundary within the system where terms and models have specific meaning.</li> <li>Ubiquitous Language \u2013 A shared language between developers and business users that everyone understands.</li> </ol>"},{"location":"part1/1.3-Designing-Microservices/#why-use-ddd","title":"\ud83c\udfaf Why use DDD?","text":"<ul> <li>Makes software closer to business reality.</li> <li>Reduces miscommunication between devs and domain experts.</li> <li>Encourages clean architecture and better code organization.</li> </ul>"},{"location":"part1/1.3-Designing-Microservices/#in-short","title":"\ud83e\udde0 In short:","text":"<p>DDD helps you build software that speaks the business language, and keeps the complexity where it belongs \u2014 in the business rules, not in the plumbing.</p>"},{"location":"part1/1.3-Designing-Microservices/#what-is-service-granularity-in-microservices","title":"\u2705 What is Service Granularity in Microservices?","text":"<p>Service Granularity refers to how big or small a microservice should be \u2014 in terms of scope, responsibilities, and size.</p>"},{"location":"part1/1.3-Designing-Microservices/#simple-definition","title":"\ud83d\udd0d Simple Definition:","text":"<p>It's about finding the right size for a microservice \u2014 not too big (like a monolith) and not too small (like nano-services).</p>"},{"location":"part1/1.3-Designing-Microservices/#two-types","title":"\ud83e\uddf1 Two Types:","text":"<ol> <li> <p>Coarse-Grained Service</p> </li> <li> <p>Has more responsibilities.</p> </li> <li>Covers broader business functionality.</li> <li>Fewer services to manage, but less flexibility.</li> <li> <p>Example: A single <code>OrderService</code> handles creation, tracking, and billing.</p> </li> <li> <p>Fine-Grained Service</p> </li> <li> <p>Has very specific responsibility.</p> </li> <li>More services, each doing only one thing.</li> <li>Greater flexibility and scalability, but more complexity in communication.</li> <li>Example: Separate services like <code>OrderCreationService</code>, <code>OrderTrackingService</code>, <code>BillingService</code>.</li> </ol>"},{"location":"part1/1.3-Designing-Microservices/#how-to-decide-the-granularity","title":"\ud83c\udfaf How to decide the granularity?","text":"<p>Ask:</p> <ul> <li>Does the service handle one clear business function?</li> <li>Can it be owned, deployed, and scaled independently?</li> <li>Will splitting or combining services help reduce communication overhead?</li> <li>Do services often change together? If yes, consider merging.</li> </ul>"},{"location":"part1/1.3-Designing-Microservices/#rule-of-thumb","title":"\ud83e\udde0 Rule of Thumb:","text":"<p>A service should do one thing well, and should not be so small that it causes excessive inter-service communication.</p>"},{"location":"part1/1.4-Communication-Patterns/","title":"\u2705 Communication Patterns","text":""},{"location":"part1/1.4-Communication-Patterns/#communication-patterns-synchronous-restgrpcgraphql","title":"\ud83d\udd04 Communication Patterns \u2013 Synchronous (REST/gRPC/GraphQL)","text":""},{"location":"part1/1.4-Communication-Patterns/#what-is-synchronous-communication","title":"\ud83d\udea6 What is Synchronous Communication?","text":"<p>In synchronous communication, the caller waits for the response before continuing. It\u2019s like making a phone call \u2014 you ask a question and wait for the answer.</p>"},{"location":"part1/1.4-Communication-Patterns/#common-synchronous-communication-methods","title":"\ud83d\udd27 Common Synchronous Communication Methods:","text":""},{"location":"part1/1.4-Communication-Patterns/#1-rest-representational-state-transfer","title":"1. \ud83c\udf10 REST (Representational State Transfer)","text":"<ul> <li>Uses HTTP and JSON</li> <li>Simple and widely used</li> <li>Based on resources (like <code>/orders</code>, <code>/users</code>)</li> <li>Good for: Public APIs, CRUD operations</li> </ul> <p>\u2705 Pros:</p> <ul> <li>Easy to use</li> <li>Readable URLs</li> <li>Standard HTTP methods (GET, POST, PUT, DELETE)</li> </ul> <p>\u274c Cons:</p> <ul> <li>Over-fetching or under-fetching of data</li> <li>No built-in schema validation</li> </ul>"},{"location":"part1/1.4-Communication-Patterns/#2-grpc-google-remote-procedure-call","title":"2. \u26a1 gRPC (Google Remote Procedure Call)","text":"<ul> <li>Uses HTTP/2 and Protobuf (binary format)</li> <li>Fast and efficient</li> <li>Based on methods, not resources</li> <li>Good for: Internal microservice-to-microservice communication</li> </ul> <p>\u2705 Pros:</p> <ul> <li>Very fast (binary + HTTP/2)</li> <li>Strongly typed contracts (Protobuf)</li> <li>Bi-directional streaming supported</li> </ul> <p>\u274c Cons:</p> <ul> <li>Harder to debug than REST</li> <li>Browser support limited</li> </ul>"},{"location":"part1/1.4-Communication-Patterns/#3-graphql","title":"3. \ud83d\udd0d GraphQL","text":"<ul> <li>Query language for APIs</li> <li>You ask for exactly the data you need</li> <li>One endpoint for everything (<code>/graphql</code>)</li> <li>Good for: Complex UIs and mobile apps</li> </ul> <p>\u2705 Pros:</p> <ul> <li>No over-fetching or under-fetching</li> <li>Flexible queries</li> <li>Strong typing (via schema)</li> </ul> <p>\u274c Cons:</p> <ul> <li>More complex to implement</li> <li>Performance tuning can be tricky</li> </ul>"},{"location":"part1/1.4-Communication-Patterns/#when-to-use-synchronous-communication","title":"\ud83e\udde0 When to Use Synchronous Communication?","text":"<p>Use when:</p> <ul> <li>Immediate response is required (e.g., UI interactions)</li> <li>Request \u2192 Response pattern fits well</li> <li>Services are closely connected</li> </ul> <p>Avoid when:</p> <ul> <li>High load may cause latency</li> <li>You need loose coupling or retries \u2192 prefer asynchronous/event-driven</li> </ul>"},{"location":"part1/1.4-Communication-Patterns/#communication-patterns-asynchronous-message-queues-events","title":"\ud83d\udd01 Communication Patterns \u2013 Asynchronous (Message Queues &amp; Events)","text":""},{"location":"part1/1.4-Communication-Patterns/#what-is-asynchronous-communication","title":"\u23f3 What is Asynchronous Communication?","text":"<p>In asynchronous communication, the sender does not wait for a response. It\u2019s like sending a message or email \u2014 the receiver can process it later, at their own pace.</p>"},{"location":"part1/1.4-Communication-Patterns/#common-asynchronous-communication-methods","title":"\ud83e\uddf0 Common Asynchronous Communication Methods:","text":""},{"location":"part1/1.4-Communication-Patterns/#1-message-queues","title":"1. \ud83d\udcec Message Queues","text":"<ul> <li>Services send messages to a queue</li> <li>Other services pick up messages and process them</li> <li>Examples: Azure Service Bus, RabbitMQ, Amazon SQS</li> </ul> <p>\u2705 Good for:</p> <ul> <li>Decoupling services</li> <li>Load buffering</li> <li>Background processing</li> </ul>"},{"location":"part1/1.4-Communication-Patterns/#2-events-pubsub","title":"2. \ud83d\udce2 Events (Pub/Sub)","text":"<ul> <li>Services publish events to a topic or event bus</li> <li>Other services subscribe and react to those events</li> <li>Examples: Kafka, Azure Event Grid, AWS SNS/SQS</li> </ul> <p>\u2705 Good for:</p> <ul> <li>Event-driven systems</li> <li>Broadcasting changes to many services (e.g., \"OrderPlaced\" triggers shipping, email)</li> </ul>"},{"location":"part1/1.4-Communication-Patterns/#benefits-of-asynchronous-communication","title":"\ud83c\udfaf Benefits of Asynchronous Communication","text":"Feature Benefit \ud83e\udde9 Loose Coupling Services don\u2019t depend on each other\u2019s availability \ud83d\udd52 Improved Resilience Temporary failures don\u2019t break the flow \u2696\ufe0f Scalability Queues handle high load by buffering requests \u23f1\ufe0f Non-blocking Fast response for sender (fire-and-forget)"},{"location":"part1/1.4-Communication-Patterns/#challenges","title":"\u2757 Challenges","text":"<ul> <li>Eventual consistency: Responses aren\u2019t immediate</li> <li>Harder to debug: No direct trace like REST calls</li> <li>Message duplication or loss: Requires retry and idempotency logic</li> <li>Delivery guarantees: At-least-once, at-most-once, exactly-once</li> </ul>"},{"location":"part1/1.4-Communication-Patterns/#when-to-use-asynchronous-communication","title":"\ud83e\udde0 When to Use Asynchronous Communication?","text":"<p>Use when:</p> <ul> <li>Tasks can run in the background</li> <li>You need decoupled services</li> <li>Services should react to events (e.g., OrderPlaced \u2192 SendInvoice)</li> </ul> <p>Avoid when:</p> <ul> <li>Immediate feedback is needed (e.g., form submission UI)</li> <li>Too many events make flow hard to track</li> </ul>"},{"location":"part1/1.4-Service-Contracts/","title":"\u2705 Service Contracts","text":""},{"location":"part1/1.4-Service-Contracts/#service-contracts-api-first-approach","title":"\ud83d\udcd8 Service Contracts \u2013 API-First Approach","text":""},{"location":"part1/1.4-Service-Contracts/#what-is-a-service-contract","title":"\ud83e\uddfe What is a Service Contract?","text":"<p>A service contract is a formal agreement that defines how a service will behave:</p> <ul> <li>What endpoints it exposes</li> <li>What requests it accepts</li> <li>What responses it returns</li> <li>What status codes and formats it follows</li> </ul> <p>It\u2019s like a blueprint for how services talk to each other \u2014 clear, consistent, and agreed upon before building.</p>"},{"location":"part1/1.4-Service-Contracts/#what-is-api-first-approach","title":"\ud83d\ude80 What is API-First Approach?","text":"<p>In an API-First approach:</p> <p>You design the API contract first, before writing any code.</p> <p>This means:</p> <ul> <li>The API spec (OpenAPI/Swagger, Protobuf, GraphQL schema) is the source of truth.</li> <li>Development teams can work in parallel \u2014 frontend, backend, QA \u2014 all rely on the same contract.</li> <li>The contract acts like a mockable stub or scaffold early in the project.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#tools-commonly-used","title":"\ud83d\udee0\ufe0f Tools Commonly Used","text":"<ul> <li>OpenAPI/Swagger \u2013 REST APIs</li> <li>AsyncAPI \u2013 Asynchronous/message-driven systems</li> <li>Protobuf \u2013 gRPC APIs</li> <li>Postman / Stoplight \u2013 API design, testing</li> <li>Pact \u2013 Contract testing (Consumer/Provider)</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#benefits-of-api-first-approach","title":"\u2705 Benefits of API-First Approach","text":"Benefit Description \ud83e\udd1d Better collaboration Frontend and backend can develop in parallel \ud83e\uddea Early testing Use mock servers to validate early \ud83d\udcda Auto documentation Docs come from the API definition \u2705 Validation &amp; Safety Ensures contracts are followed and changes are tracked \ud83d\udea7 Catch breaking changes Prevents accidental API breakage"},{"location":"part1/1.4-Service-Contracts/#real-world-example","title":"\ud83e\udde0 Real-World Example","text":"<p>Let\u2019s say you're building an Order Service.</p> <p>With API-first:</p> <ol> <li>You first write the OpenAPI spec:</li> </ol> <pre><code>paths:\n  /orders:\n    post:\n      summary: Create a new order\n      requestBody:\n        ...\n      responses:\n        201:\n          description: Order created\n</code></pre> <ol> <li>Frontend uses the spec to build UI.</li> <li>Backend uses the spec to generate controllers.</li> <li>QA uses the spec to mock and test early.</li> </ol>"},{"location":"part1/1.4-Service-Contracts/#openapi-swagger-scalar-simple-explanation","title":"\ud83d\udcd8 OpenAPI / Swagger / Scalar \u2014 Simple Explanation","text":""},{"location":"part1/1.4-Service-Contracts/#what-is-openapi","title":"\ud83c\udf10 What is OpenAPI?","text":"<ul> <li>OpenAPI is a standard format (a specification) to describe REST APIs clearly and consistently.</li> <li>It\u2019s like a contract or blueprint that shows what API endpoints exist, what data they expect, and what they return.</li> <li>Written in YAML or JSON format.</li> <li>Helps tools generate documentation, client SDKs, and tests automatically.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#what-is-swagger","title":"\ud83d\udee0 What is Swagger?","text":"<ul> <li>Swagger is a set of tools built around OpenAPI.</li> <li> <p>It includes:</p> </li> <li> <p>Swagger Editor \u2014 to write OpenAPI specs.</p> </li> <li>Swagger UI \u2014 to display API docs as a friendly webpage.</li> <li>Swagger Codegen \u2014 to generate client/server code.</li> <li>So, Swagger = tools to work with OpenAPI specs.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#what-is-a-scalar","title":"\ud83d\udd21 What is a Scalar?","text":"<ul> <li>In API schemas (like OpenAPI or GraphQL), a Scalar is a basic data type that holds a single value.</li> <li> <p>Examples of scalars:</p> </li> <li> <p>String \u2014 text like \"Hello\"</p> </li> <li>Integer \u2014 whole numbers like 1, 42</li> <li>Boolean \u2014 true or false</li> <li>Float \u2014 decimal numbers like 3.14</li> <li>Scalars are the building blocks of request/response data structures.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#how-they-fit-together","title":"\ud83e\udde9 How they fit together:","text":"Term What it means OpenAPI The specification for describing REST APIs Swagger The toolset to create, visualize, and use OpenAPI specs Scalar Basic data types used inside API definitions"},{"location":"part1/1.4-Service-Contracts/#backward-compatibility","title":"\ud83d\udd19 Backward Compatibility","text":""},{"location":"part1/1.4-Service-Contracts/#what-is-backward-compatibility","title":"What is Backward Compatibility?","text":"<p>Backward Compatibility means:</p> <p>When you update a service or API, the new version still works with older clients or consumers without breaking them.</p> <p>In other words, old clients can keep using the new service without errors.</p>"},{"location":"part1/1.4-Service-Contracts/#why-is-it-important-in-microservices","title":"Why is it important in Microservices?","text":"<ul> <li>Multiple services and apps may call your API.</li> <li>You can\u2019t force everyone to upgrade at once.</li> <li>You want to release new features or fix bugs without stopping old clients.</li> <li>Ensures smooth evolution of services over time.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#how-to-maintain-backward-compatibility","title":"How to maintain Backward Compatibility?","text":"<ul> <li>Add new fields but don\u2019t remove existing ones.</li> <li>Make changes additive, not breaking.</li> <li>Avoid changing existing data types or request formats.</li> <li>Support old API endpoints or versions (versioning).</li> <li>Use default values for new fields.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#example","title":"Example:","text":"<p>If your API response used to return:</p> <pre><code>{\n  \"name\": \"John\",\n  \"age\": 30\n}\n</code></pre> <p>You can add a new field like:</p> <pre><code>{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"email\": \"john@example.com\"  // new field added\n}\n</code></pre> <p>Old clients ignoring <code>email</code> still work fine.</p>"},{"location":"part1/1.4-Service-Contracts/#summary","title":"Summary","text":"<p>Backward Compatibility helps you improve your microservices without breaking existing users \u2014 a key part of good API design!</p>"},{"location":"part1/1.4-Service-Contracts/#setting-up-development-environment","title":"\u2699\ufe0f Setting up Development Environment","text":""},{"location":"part1/1.4-Service-Contracts/#1-tools-ides","title":"1. Tools &amp; IDEs","text":"<ul> <li>Visual Studio / Visual Studio Code \u2014 Popular IDEs for microservice development.</li> <li>Postman / Insomnia \u2014 API testing tools.</li> <li>Database Clients \u2014 e.g., SQL Server Management Studio</li> <li>Logging &amp; Monitoring Tools \u2014 e.g., ELK stack, Grafana.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#2-docker-and-containers","title":"2. Docker and Containers","text":"<ul> <li>Install Docker Desktop to build and run containers locally.</li> <li>Use Docker Compose to orchestrate multiple microservices and dependencies.</li> <li>Containers package your microservices with all dependencies ensuring consistency across environments.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#3-git-repositories","title":"3. Git Repositories","text":"<ul> <li>Use Git for version control.</li> <li>Host repositories on GitHub or other Git platforms.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#4-branching-strategy","title":"4. Branching Strategy","text":"<ul> <li>Use a branching model to organize work and releases.</li> <li> <p>Common strategies:</p> </li> <li> <p>Git Flow: Feature branches, develop branch, release branches, main/master branch.</p> </li> <li>GitHub Flow: Main branch + short-lived feature branches.</li> <li>Trunk Based Development: Frequent small merges to main.</li> <li>Branch naming examples: <code>feature/user-auth</code>, <code>bugfix/login-error</code>, <code>release/v1.0</code>.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#tips","title":"Tips","text":"<ul> <li>Always pull latest changes before starting work.</li> <li>Create pull requests / merge requests for code reviews.</li> <li>Use .gitignore files to avoid committing sensitive or unnecessary files.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#different-types-of-branching-strategies","title":"\ud83c\udf3f Different Types of Branching Strategies","text":""},{"location":"part1/1.4-Service-Contracts/#1-git-flow","title":"1. Git Flow","text":"<ul> <li>Uses multiple branches: <code>master</code> (production), <code>develop</code> (integration), feature branches, release branches, and hotfix branches.</li> <li>Good for complex projects with planned releases and multiple environments.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#2-github-flow","title":"2. GitHub Flow","text":"<ul> <li>Simple model with a single <code>main</code> branch.</li> <li>Developers create short-lived feature branches off <code>main</code>.</li> <li>After code review, branches are merged back into <code>main</code>.</li> <li>Ideal for continuous deployment and simpler workflows.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#3-trunk-based-development","title":"3. Trunk-Based Development","text":"<ul> <li>All developers work on a single <code>trunk</code> (often <code>main</code> or <code>master</code>).</li> <li>Small, frequent commits with feature toggles to manage incomplete features.</li> <li>Supports continuous integration and fast delivery.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#4-feature-branching","title":"4. Feature Branching","text":"<ul> <li>Developers create branches for each feature or bugfix.</li> <li>Branches live until feature is complete, then merged back.</li> <li>Helps isolate development and reduce conflicts.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#5-release-branching","title":"5. Release Branching","text":"<ul> <li>Create branches specifically for preparing releases.</li> <li>Stabilize and test release branch before merging to production branch.</li> <li>Allows bug fixes without disrupting ongoing development.</li> </ul>"},{"location":"part1/1.4-Service-Contracts/#6-forking-workflow","title":"6. Forking Workflow","text":"<ul> <li>Developers fork the main repository to their own copy.</li> <li>Make changes in the fork, then create pull requests to original repo.</li> <li>Common in open-source projects.</li> </ul>"},{"location":"part1/event-message/","title":"Event message","text":"<p>Great question! Here's a simple explanation suitable for a class on Event-Driven Architecture (EDA):</p>"},{"location":"part1/event-message/#what-is-an-event","title":"\u2705 What is an Event?","text":"<p>An event is a fact or thing that has happened in a system.</p> <p>It's a record of something that occurred in the past.</p>"},{"location":"part1/event-message/#example","title":"\ud83d\udd39 Example:","text":"<ul> <li>\"OrderPlaced\"</li> <li>\"UserRegistered\"</li> <li>\"PaymentFailed\"</li> </ul> <p>These are immutable, meaning once they happen, they don\u2019t change.</p>"},{"location":"part1/event-message/#what-is-a-message","title":"\u2705 What is a Message?","text":"<p>A message is a piece of data sent from one service to another to communicate something \u2014 and it may contain an event.</p> <p>Messages are how services talk to each other \u2014 either by sending commands or publishing events.</p>"},{"location":"part1/event-message/#types-of-messages","title":"\ud83d\udd39 Types of Messages:","text":"<ul> <li>Event message \u2013 \u201cAn order was placed.\u201d</li> <li>Command message \u2013 \u201cCreate an invoice.\u201d</li> <li>Query message \u2013 \u201cGet order status.\u201d</li> </ul>"},{"location":"part1/event-message/#event-vs-message-side-by-side","title":"\ud83d\udd04 Event vs Message (Side by Side)","text":"Aspect Event Message What it is A record of something that happened A communication between services Direction Usually one-way (publish) One-way or request-response Example \"OrderPlaced\" \"CreateInvoiceCommand\" Nature Passive (just notifies) Active (asks for something)"},{"location":"part1/event-message/#summary","title":"\ud83e\udde0 Summary:","text":"<ul> <li>An event says: \u201cSomething happened.\u201d</li> <li>A message says: \u201cHere\u2019s some info for you.\u201d</li> </ul> <p>In event-driven systems, services emit events and consume events using messages.</p> <p>Let me know if you want to include Kafka, RabbitMQ, or Azure Service Bus in your examples.</p>"},{"location":"part2/2.1-Building-Microservice/","title":"Part 1: Building Microservices","text":""},{"location":"part2/2.1-Building-Microservice/#overview-of-tech-choices-for-building-microservices","title":"\ud83e\uddf0 Overview of Tech Choices for Building Microservices","text":"<p>When building microservices, we will have several technology options based on team\u2019s skills, business needs, and project scale.</p>"},{"location":"part2/2.1-Building-Microservice/#backend-frameworks","title":"\ud83d\udda5\ufe0f Backend Frameworks","text":"Technology Language Best For .NET Core / ASP.NET Core C# Enterprise apps, Windows/Linux support, high performance Spring Boot Java Enterprise Java apps, full ecosystem support Node.js + Express JavaScript Lightweight services, high I/O apps, fast dev Python + FastAPI / Flask Python AI/ML integration, quick prototyping Go (Golang) Go High-performance, scalable systems Rust / Actix Rust Systems requiring speed and safety (less common)"},{"location":"part2/2.1-Building-Microservice/#containerization-orchestration","title":"\ud83d\udc33 Containerization &amp; Orchestration","text":"Tool Purpose Docker Containerize microservices for consistent environments Docker Compose Run multiple services locally for development Kubernetes (K8s) Manage and scale containers in production Helm Package and deploy Kubernetes applications Minikube / Kind Run a local Kubernetes cluster for dev/testing"},{"location":"part2/2.1-Building-Microservice/#developer-tools-ides","title":"\ud83d\udcbb Developer Tools &amp; IDEs","text":"Tool Purpose Visual Studio / VS Code .NET, JS, Python, general development IntelliJ IDEA / STS Java and Spring Boot Postman / Insomnia API testing GitHub Desktop / Git CLI Version control &amp; collaboration Docker Desktop Run containers locally Azure CLI / AWS CLI / kubectl Cloud &amp; K8s management"},{"location":"part2/2.1-Building-Microservice/#devops-cicd","title":"\ud83d\udd27 DevOps &amp; CI/CD","text":"Tool Purpose GitHub Actions CI/CD automation for GitHub repos Azure DevOps CI/CD pipelines, boards, repos, artifacts Jenkins/ Teamscity Customizable open-source CI/CD tool Octopus Deploy Deployment automation"},{"location":"part2/2.1-Building-Microservice/#databases-messaging","title":"\ud83d\uddc3\ufe0f Databases &amp; Messaging","text":"Category Examples Usage SQL DBs SQL Server, PostgreSQL, MySQL Relational data, transactions NoSQL DBs MongoDB, Cassandra, Redis Flexible schema, caching, high-speed Messaging RabbitMQ, Kafka, Azure Service Bus Asynchronous communication, events"},{"location":"part2/2.1-Building-Microservice/#api-contract-tools","title":"\ud83d\udcc4 API &amp; Contract Tools","text":"Tool Purpose OpenAPI / Swagger Define and document REST APIs GraphQL Flexible querying for frontend gRPC High-performance binary RPC communication Pact / Postman Contract and API testing"},{"location":"part2/2.1-Building-Microservice/#monitoring-logging","title":"\ud83c\udf10 Monitoring &amp; Logging","text":"Tool Purpose Prometheus + Grafana Metrics collection and dashboards ELK Stack (Elastic, Logstash, Kibana) Centralized logging Jaeger / Zipkin Distributed tracing in microservices Application Insights (Azure) Logs, metrics, traces"},{"location":"part2/2.2-Business-Case/","title":"2.2 Business Case","text":""},{"location":"part2/2.2-Business-Case/#business-case-eventicket-event-booking-microservice-platform","title":"\ud83d\udcd8 Business Case: EvenTicket \u2013 Event Booking Microservice Platform","text":""},{"location":"part2/2.2-Business-Case/#project-overview","title":"\ud83c\udfaf Project Overview","text":"<p>EvenTicket is an online platform that allows users to search, book, and manage tickets for events like concerts, sports, workshops, and theater shows. The system should handle high traffic, support real-time availability, and ensure secure payment processing.</p>"},{"location":"part2/2.2-Business-Case/#functional-requirements-fr","title":"\u2705 Functional Requirements (FR)","text":"<ol> <li> <p>User Management</p> </li> <li> <p>Register/login (with email/password or social login)</p> </li> <li> <p>View profile, booking history</p> </li> <li> <p>Event Management</p> </li> <li> <p>Event organizers can create, update, and delete events</p> </li> <li> <p>Each event includes details (title, date, venue, tickets, price)</p> </li> <li> <p>Event Search &amp; Discovery</p> </li> <li> <p>Users can search by category, location, or date</p> </li> <li> <p>Filter by availability, price range</p> </li> <li> <p>Ticket Booking</p> </li> <li> <p>Book one or more tickets</p> </li> <li>Lock ticket inventory temporarily during booking</li> <li> <p>Handle booking timeout and expiry</p> </li> <li> <p>Payments</p> </li> <li> <p>Integrate with a payment gateway (mocked for now)</p> </li> <li> <p>Generate order confirmation on successful payment</p> </li> <li> <p>Notifications</p> </li> <li> <p>Send booking confirmation via email/SMS</p> </li> <li> <p>Notify users of event updates/cancellations</p> </li> <li> <p>Admin Portal (optional)</p> </li> <li> <p>View reports, manage users/events/bookings</p> </li> </ol>"},{"location":"part2/2.2-Business-Case/#non-functional-requirements-nfr","title":"\ud83d\udeab Non-Functional Requirements (NFR)","text":"Category Requirement Scalability System must handle 1000+ concurrent bookings per second Availability 99.9% uptime SLA Performance API response time &lt; 500ms for most operations Security Secure API access (OAuth2), input validation, payment encryption Logging Centralized logging and error tracking for all services Monitoring Real-time metrics and alerts using Prometheus + Grafana (or Azure Monitor) Data Integrity Prevent double-booking of tickets using locking or event-driven updates Resilience Use retries and circuit breakers for dependent services Extensibility Should support new features like discounts, coupons, loyalty programs"},{"location":"part2/2.2-Business-Case/#microservices-suggested","title":"\ud83e\uddf1 Microservices (Suggested)","text":"Service Name Responsibilities Event Service Create/manage event listings Payment Service Integrate with external payment gateway Gateway API Entry point to all APIs, handles routing and authentication"},{"location":"part2/2.2-Business-Case/#event-driven-architecture-example-events","title":"\ud83d\udce9 Event-Driven Architecture (Example Events)","text":"Event Producer Consumers <code>EventCreated</code> Event Service Search Service <code>BookingExpired</code> Booking Service Ticket Release Handler"},{"location":"part2/2.2-Business-Case/#tech-stack-example","title":"\ud83d\udee0 Tech Stack (Example)","text":"<ul> <li>Backend: .NET Core (Web API), Azure Service Bus for events</li> <li>Frontend: .NET Core (MVC)</li> <li>Database: SQL Server / CosmoDb (per service)</li> <li>API Gateway: YARP (for routing)</li> <li>Containerization: Docker, Docker Compose for local dev</li> <li>Deployment: Kubernetes (minikube/kind for dev), or Azure AKS or GCHR</li> <li>CI/CD: GitHub Actions </li> <li>Monitoring: Prometheus, Grafana, ELK Stack</li> </ul>"},{"location":"part2/2.2-Business-Case/#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":"<ul> <li>Unit tests for services</li> <li>Integration tests for inter-service communication</li> <li>Load testing using k6 or JMeter</li> </ul>"},{"location":"part2/2.2-Business-Case/#future-enhancements","title":"\ud83d\udcc8 Future Enhancements","text":"<ul> <li>User reviews &amp; ratings</li> <li>QR code-based digital ticketing</li> <li>Loyalty rewards system</li> <li>Integration with calendar/reminder services</li> <li>Event sponsorships and advertisements</li> </ul>"},{"location":"part2/2.2-Business-Case/#wireframe","title":"Wireframe","text":""},{"location":"part2/2.2-Business-Case/#context-diagram","title":"Context Diagram","text":""},{"location":"part2/2.2-Business-Case/#module-decomposition-diagram","title":"Module Decomposition Diagram","text":""},{"location":"part2/2.2-Business-Case/#component-diagram","title":"Component Diagram","text":""},{"location":"part2/2.2-Business-Case/#deployment-diagram","title":"Deployment Diagram","text":""},{"location":"part2/2.2-Business-Case/#how-system-works","title":"How System works","text":""},{"location":"part2/2.2-Business-Case/#why-microservices-for-eventicket","title":"Why Microservices for EvenTicket?","text":""},{"location":"part2/2.2-Business-Case/#business-case-event-booking-platform","title":"Business Case: Event Booking Platform","text":"<p>EvenTicket needs to support a variety of independent but connected features \u2014 user management, event discovery, ticket booking, payments, notifications, etc. Microservices architecture is well-suited for this type of system.</p>"},{"location":"part2/2.2-Business-Case/#benefits-of-microservices-for-eventicket","title":"\u2705 Benefits of Microservices for EvenTicket","text":""},{"location":"part2/2.2-Business-Case/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<p>Each service handles only one responsibility:</p> <ul> <li><code>UserService</code> manages users.</li> <li><code>BookingService</code> handles ticket availability.</li> <li><code>PaymentService</code> focuses on transactions.</li> </ul> <p>\u27a1\ufe0f This makes the system easier to understand, maintain, and evolve.</p>"},{"location":"part2/2.2-Business-Case/#2-scalability","title":"2. Scalability","text":"<ul> <li>Some services like <code>SearchService</code> and <code>BookingService</code> might get more traffic.</li> <li>Microservices allow independent scaling \u2014 scale only the services that need it, saving cost and improving performance.</li> </ul>"},{"location":"part2/2.2-Business-Case/#3-technology-flexibility","title":"3. Technology Flexibility","text":"<ul> <li>You can build services in different languages if needed (e.g., .NET for Booking, Node.js for Notification).</li> <li>Allows teams to choose the best tools for each job.</li> </ul>"},{"location":"part2/2.2-Business-Case/#4-faster-development-deployment","title":"4. Faster Development &amp; Deployment","text":"<ul> <li>Teams can work independently on different services.</li> <li>Deploy a new version of <code>PaymentService</code> without touching <code>EventService</code>.</li> </ul> <p>\u27a1\ufe0f Enables faster feature rollout and reduced risk of breaking the whole system.</p>"},{"location":"part2/2.2-Business-Case/#5-fault-isolation","title":"5. Fault Isolation","text":"<ul> <li>If <code>NotificationService</code> fails, booking still works.</li> <li>Reduces the risk of system-wide failure.</li> </ul>"},{"location":"part2/2.2-Business-Case/#6-event-driven-capabilities","title":"6. Event-Driven Capabilities","text":"<ul> <li>Microservices fit naturally into an event-driven system.</li> <li>Example: After a successful booking, <code>BookingService</code> can emit a <code>TicketBooked</code> event \u2192 other services like Notification or Analytics can react asynchronously.</li> </ul>"},{"location":"part2/2.2-Business-Case/#7-easy-to-extend","title":"7. Easy to Extend","text":"<ul> <li>Adding new features like coupons, loyalty points, or QR code validation?</li> <li>Just add new services without changing the existing ones.</li> </ul>"},{"location":"part2/2.2-Business-Case/#microservices-match-the-business-complexity","title":"\ud83d\udee0\ufe0f Microservices Match the Business Complexity","text":"<p>EvenTicket involves multiple domains:</p> <ul> <li>Users</li> <li>Events</li> <li>Orders/Bookings</li> <li>Payments</li> <li>Notifications</li> </ul> <p>Each has its own business logic, data model, and scaling requirements \u2014 making it a perfect candidate for microservices.</p>"},{"location":"part2/2.2-Business-Case/#port-numbers-for-microservice","title":"Port numbers for Microservice","text":"<p>Microservices |  Local Env | Docker Env | Docker Inside |---|---|---|---| Event Catalog  |  5000-5050 | 6000-6050 |8080-8081 | Shopping  |  5001-5051 | 6001-6051 |8080-8081 | Discount  |  5002-5052 | 6002-6052 |8080-8081 | Ordering  |  5003-5053 | 6003-6053 |8080-8081 | Payment   |  5004-5054 | 6004-6054 |8080-8081 | External Payment   |  5005-5055 | 6005-6055 |8080-8081 | API Gateway   |  5006-5056 | 6006-6056 |8080-8081 |</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/","title":"Building First Microservice","text":""},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#building-first-microservice-eventcatalogservice","title":"\ud83c\udfac Building First Microservice \u2013 <code>EventCatalogService</code>","text":"<p>The Event Catalog Service will be responsible for managing the list of events that users can view and search.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#1-responsibilities-of-eventcatalogservice","title":"\ud83e\uddf1 1. Responsibilities of EventCatalogService","text":"Feature Description Get Event by ID View full details of a specific event List All Events Public API to list/search all upcoming events Get Category Public API to list all Category"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#2-tech-stack","title":"\u2699\ufe0f 2. Tech Stack","text":"Layer Tech Language C# (.NET 9) Framework ASP.NET Core Web API DB SQL Server API Docs Swagger /Scalar / http / OpenAPI Container Docker ORM EF Core"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#3-core-models-example","title":"\ud83d\udee0\ufe0f 3. Core Models (Example)","text":"<pre><code>public class Event\n{\n    [Required]\n    public Guid EventId { get; set; }\n    public string Name { get; set; }\n    public int Price { get; set; }\n    public string Artist { get; set; }\n    public DateTime Date { get; set; }\n    public string Description { get; set; }\n    public string ImageUrl { get; set; }\n    public Guid CategoryId { get; set; }\n    public Category Category { get; set; }\n}\n\npublic class Category\n{\n    public Guid CategoryId { get; set; }\n    public string Name { get; set; }\n    public List&lt;Event&gt; Events { get; set; }\n}\n</code></pre>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#4-api-endpoints-openapi-spec","title":"\ud83d\udd17 4. API Endpoints (OpenAPI Spec)","text":"Method Endpoint Description GET <code>/api/events</code> Get all events GET <code>/api/events/{id}</code> Get event by ID GET <code>/api/Category</code> Get all categories"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#creating-the-eventicket-solution","title":"\ud83d\udee0\ufe0f Creating the EvenTicket Solution","text":""},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#1-create-the-solution","title":"\ud83d\udce6 1. Create the Solution","text":"<pre><code>dotnet new sln -n EvenTicket\n</code></pre> <p>This creates a <code>.sln</code> file named <code>EvenTicket.sln</code>.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#2-create-the-event-catalog-web-api-project","title":"\ud83e\uddf1 2. Create the Event Catalog Web API Project","text":"<pre><code>dotnet new webapi -n EvenTicket.Services.EventCatalog --use-controllers -o src/EvenTicket.Services.EventCatalog\n</code></pre> <ul> <li><code>--use-controllers</code> \u2192 uses traditional MVC controller pattern.</li> <li><code>-n</code> or <code>--name</code>  Sets the project name (and folder name).</li> <li><code>-o</code> or <code>--output</code>    Specifies the output directory (default: current folder).</li> <li><code>--no-https</code>  Disables HTTPS (not recommended for production).</li> <li><code>--framework</code> Targets a specific .NET version (e.g., net9.0).</li> <li><code>--use-controllers</code>   Uses controllers instead of minimal APIs.</li> <li><code>--no-openapi</code> Disables OpenAPI (Swagger) support.</li> </ul> <p>This creates the microservice project inside the <code>src</code> folder.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#3-add-the-project-to-the-solution","title":"\ud83e\udde9 3. Add the Project to the Solution","text":"<pre><code>dotnet sln add src/EvenTicket.Services.EventCatalog/EvenTicket.Services.EventCatalog.csproj\n</code></pre> <p>This adds your new microservice project to the solution file.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#4-verify-solution-structure","title":"\u2705 4. Verify Solution Structure","text":"<pre><code>dotnet sln list\n</code></pre> <p>Output should confirm the project is included in the solution.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#project-structure-after-creating-project","title":"\ud83d\udcc1 Project Structure after creating project","text":""},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#getting-started-with-code-eventcatalog-microservice","title":"Getting Started with Code \u2013 EventCatalog Microservice","text":""},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#step-1-disable-nullable-in-csproj","title":"\ud83d\udee0 Step 1: Disable Nullable in .csproj","text":"<pre><code> &lt;PropertyGroup&gt;\n   &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;\n   &lt;Nullable&gt;disable&lt;/Nullable&gt;\n   &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n &lt;/PropertyGroup&gt;\n</code></pre>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#what-this-does","title":"\ud83d\udd0d What This Does:","text":"<ul> <li>: Specifies .NET 9.0 as the target framework. <li>disable: Disables nullable reference type checking, which avoids compiler warnings for uninitialized non-nullable reference types.</li> <li>enable: Automatically includes commonly used using directives to reduce boilerplate.</li> <p>\ud83d\udc49 Why: Keeping things simple for demo and learning purposes \u2014 especially for beginners not ready to deal with nullable warnings. Then create two class file inside Entities folder</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#step-2-define-domain-models-entities","title":"\ud83d\udcc1 Step 2: Define Domain Models (Entities)","text":"<pre><code>public class Category\n{\n    public Guid CategoryId { get; set; }\n    public string Name { get; set; }\n    public List&lt;Event&gt; Events { get; set; }\n}\n\npublic class Event\n{\n    [Required]\n    public Guid EventId { get; set; }\n    public string Name { get; set; }\n    public int Price { get; set; }\n    public string Artist { get; set; }\n    public DateTime Date { get; set; }\n    public string Description { get; set; }\n    public string ImageUrl { get; set; }\n    public Guid CategoryId { get; set; }\n    public Category Category { get; set; }\n}\n</code></pre>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#what-this-does_1","title":"\ud83d\udd0d What This Does:","text":"<ul> <li>Models your core business entities: Category and Event.</li> <li>Demonstrates a one-to-many relationship: A Category can have many Events.</li> <li>Includes required fields like Name, Artist, Price, and Date.</li> </ul> <p>\ud83d\udc49 Why: Clean and simple structure to store and retrieve event listings grouped by category.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#step-3-create-dbcontext-for-ef-core","title":"\ud83e\udde0 Step 3: Create DbContext for EF Core","text":"<pre><code>public class EventCatalogDbContext(DbContextOptions&lt;EventCatalogDbContext&gt; options, ILogger&lt;EventCatalogDbContext&gt; logger) : DbContext(options)\n{\n    public DbSet&lt;Category&gt; Categories { get; set; }\n    public DbSet&lt;Event&gt; Events { get; set; }\n}\n</code></pre>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#step-4-create-dtos-data-transfer-objects","title":"\ud83e\uddfe Step 4: Create DTOs (Data Transfer Objects)","text":"<pre><code>public record CategoryDto\n{\n    public Guid CategoryId { get; set; }\n    public string Name { get; set; }\n}\n\npublic record EventDto\n{\n    public Guid EventId { get; set; }\n    public string Name { get; set; }\n    public int Price { get; set; }\n    public string Artist { get; set; }\n    public DateTime Date { get; set; }\n    public string Description { get; set; }\n    public string ImageUrl { get; set; }\n    public Guid CategoryId { get; set; }\n    public string CategoryName { get; set; }\n}\n</code></pre> <p>async program</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#differenence-between-class-and-record","title":"Differenence between Class and Record","text":"<p>In C#, both class and record are used to define types, but they serve different purposes and have distinct behaviors.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#1-class","title":"1. Class:","text":"<ul> <li>A class is a reference type.</li> <li>Objects created from a class are stored on the heap, and assignment copies references.</li> <li>Best suited for defining objects with behavior (methods) and mutable state.</li> <li>Requires explicit implementation for equality comparison.</li> <li>Example:</li> </ul> <pre><code>class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\nvar person1 = new Person { Name = \"Alice\", Age = 30 };\nvar person2 = person1; // Both point to the same object.\nperson2.Age = 35;\nConsole.WriteLine(person1.Age); // Output: 35\n</code></pre>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#2-record","title":"2. Record:","text":"<ul> <li>A record is also a reference type (by default), but it is immutable by design.</li> <li>Introduced in C# 9.0 for defining data-centric types.</li> <li>Comes with built-in value-based equality.</li> <li>Supports concise with-expressions for immutability.</li> <li>Example:</li> </ul> <pre><code>record Person(string Name, int Age);\n\nvar person1 = new Person(\"Alice\", 30);\nvar person2 = person1 with { Age = 35 }; // Creates a new object\nConsole.WriteLine(person1.Age); // Output: 30\nConsole.WriteLine(person2.Age); // Output: 35\n</code></pre>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#3-key-differences","title":"3. Key Differences:","text":"Feature Class Record Type Reference type Reference type (by default) Equality Reference equality Value-based equality Immutability Mutable by default Immutable by default Use case Best for objects with behavior Best for data-centric models Copying Manual copying needed Supports <code>with</code> expressions Syntax <code>class</code> keyword <code>record</code> keyword <p>When to Use What?</p> <ul> <li>Use class when you need behavior, state changes, or large mutable objects.</li> <li>Use record when you need immutable, value-like objects (e.g., DTOs, configuration settings).</li> </ul>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#why-asynchronous-programming","title":"\ud83e\udde0 Why Asynchronous Programming?","text":"<p>In traditional synchronous programming, each line of code waits for the previous one to finish. This becomes a bottleneck when the code performs I/O-bound tasks like:</p> <ul> <li>Calling external APIs</li> <li>Reading or writing files</li> <li>Database operations</li> <li>Sending emails</li> </ul> <p>Example:</p> <pre><code>var data = GetFromApi(); // waits for response\nvar file = File.ReadAllText(\"log.txt\"); // waits for disk I/O\n</code></pre> <p>In high-load environments like web servers, this blocks valuable threads, limiting scalability. Instead, async programming allows I/O to happen in the background, letting the thread serve other requests.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#understanding-async-and-await","title":"\ud83d\udd11 Understanding <code>async</code> and <code>await</code>","text":"<p>The <code>async</code> and <code>await</code> keywords in C# are used to implement asynchronous methods. Think of <code>async</code> as a way to \"mark a method for background execution\" and <code>await</code> as \"pausing without blocking\".</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#basic-rules","title":"Basic Rules:","text":"<ul> <li>A method must be marked <code>async</code> to use <code>await</code> inside it.</li> <li>An <code>async</code> method returns <code>Task</code>, <code>Task&lt;T&gt;</code>, or <code>ValueTask&lt;T&gt;</code> (avoid <code>void</code> unless it's for event handlers).</li> </ul>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#example","title":"Example:","text":"<pre><code>public async Task&lt;string&gt; FetchDataAsync()\n{\n    HttpClient client = new HttpClient();\n    string json = await client.GetStringAsync(\"https://jsonplaceholder.typicode.com/todos/1\");\n    return json;\n}\n</code></pre> <p>Here:</p> <ul> <li><code>HttpClient.GetStringAsync</code> starts downloading the JSON in the background.</li> <li><code>await</code> tells the method to \"pause here and resume when done\".</li> </ul> <p>Behind the scenes, the compiler generates a state machine to manage this.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#synchronous-vs-asynchronous","title":"\ud83d\udea6 Synchronous vs Asynchronous","text":""},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#synchronous-file-read","title":"\ud83d\udd39 Synchronous File Read","text":"<pre><code>public string ReadFile()\n{\n    return File.ReadAllText(\"data.txt\"); // Blocking\n}\n</code></pre> <ul> <li>Blocks the calling thread until the file is read.</li> <li>UI becomes unresponsive during this operation.</li> </ul>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#asynchronous-file-read","title":"\ud83d\udd39 Asynchronous File Read","text":"<pre><code>public async Task&lt;string&gt; ReadFileAsync()\n{\n    return await File.ReadAllTextAsync(\"data.txt\"); // Non-blocking\n}\n</code></pre> <ul> <li>Frees up the thread to do other work.</li> <li>Recommended for web servers and UI apps.</li> </ul>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#task-based-asynchronous-pattern-tap","title":"\ud83d\udce6 Task-Based Asynchronous Pattern (TAP)","text":"<p>TAP is the standard for asynchronous programming in .NET. You\u2019ll notice many modern .NET APIs return <code>Task</code> or <code>Task&lt;T&gt;</code>.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#example-with-delay","title":"Example with Delay:","text":"<pre><code>public async Task SimulateDelayAsync()\n{\n    Console.WriteLine(\"Starting delay...\");\n    await Task.Delay(3000); // 3-second non-blocking delay\n    Console.WriteLine(\"Completed.\");\n}\n</code></pre> <p>This mimics real-world delays like network latency or slow APIs.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#benefits-of-tap","title":"Benefits of TAP:","text":"<ul> <li>Easy chaining: <code>await FetchDataAsync().ContinueWith(...)</code></li> <li>Exceptions propagate through <code>Task</code> (can use <code>try-catch</code>)</li> <li>Integrates seamlessly with ASP.NET Core, WinForms, and WPF</li> </ul>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#async-vs-parallel-programming","title":"\ud83d\udd01 Async vs Parallel Programming","text":"<p>It\u2019s common to confuse asynchronous with parallel programming.</p> Concept Description Async Non-blocking operations; uses single thread efficiently Parallel Multiple threads doing work at the same time"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#parallel-example","title":"Parallel Example:","text":"<pre><code>Parallel.For(0, 10, i =&gt;\n{\n    Console.WriteLine($\"Processing {i}\");\n});\n</code></pre>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#async-example","title":"Async Example:","text":"<pre><code>public async Task RunInSequenceAsync()\n{\n    await Task.Delay(1000);\n    Console.WriteLine(\"Done\");\n}\n</code></pre> <p>Use async for I/O-bound tasks and parallel for CPU-bound tasks.</p>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#real-world-aspnet-core-api-example","title":"\ud83e\uddea Real-World ASP.NET Core API Example","text":"<p>Let\u2019s build a weather API using <code>async</code>/<code>await</code>.</p> <pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class WeatherController : ControllerBase\n{\n    private readonly HttpClient _httpClient;\n\n    public WeatherController(HttpClient httpClient)\n    {\n        _httpClient = httpClient;\n    }\n\n    [HttpGet(\"forecast\")]\n    public async Task&lt;IActionResult&gt; GetForecastAsync()\n    {\n        string url = \"https://api.weatherapi.com/v1/current.json?key=demo&amp;q=London\";\n        var data = await _httpClient.GetStringAsync(url);\n        return Ok(data);\n    }\n}\n</code></pre>"},{"location":"part2/2.3-Building-First-Microservice-Lab-01/#why-it-matters","title":"Why It Matters:","text":"<ul> <li>The <code>await</code>ed API call doesn't block the request thread.</li> <li>Server can serve other requests during the wait.</li> <li>Scalable and efficient.</li> </ul>"},{"location":"part2/2.4-Adding-Microservice-Lab-02/","title":"Adding Microservice","text":""},{"location":"part2/2.4-Adding-Microservice-Lab-02/#adding-microservice-shoppingbasket","title":"\ud83c\udfac Adding Microservice \u2013 <code>ShoppingBasket</code>","text":"<p>The Shopping Basket Service will be responsible for managing the list of events that users can view and search.</p>"},{"location":"part2/2.4-Adding-Microservice-Lab-02/#1-responsibilities-of-eventcatalogservice","title":"\ud83e\uddf1 1. Responsibilities of EventCatalogService","text":"Feature Description"},{"location":"part2/2.4-Adding-Microservice-Lab-02/#2-tech-stack","title":"\u2699\ufe0f 2. Tech Stack","text":"Layer Tech Language C# (.NET 9) Framework ASP.NET Core Web API DB SQL Server API Docs Swagger /Scalar / http / OpenAPI Container Docker ORM EF Core"},{"location":"part2/2.4-Adding-Microservice-Lab-02/#3-core-models-example","title":"\ud83d\udee0\ufe0f 3. Core Models (Example)","text":"<pre><code> public class Event\n {\n     public Guid EventId { get; set; }\n     public string Name { get; set; }\n     public DateTime Date { get; set; }\n }\n\n    public class BasketLine\n    {\n        public Guid BasketLineId { get; set; }\n\n        [Required]\n        public Guid BasketId { get; set; }\n\n        [Required]\n        public Guid EventId { get; set; }\n        public Event Event { get; set; }\n\n        [Required]\n        public int TicketAmount { get; set; }\n\n        [Required]\n        public int Price { get; set; }\n\n        public Basket Basket { get; set; }\n    }\n\n      public class Basket\n  {\n      public Guid BasketId { get; set; }\n\n      [Required]\n      public Guid UserId { get; set; }\n\n      public Collection&lt;BasketLine&gt; BasketLines { get; set; }\n  }\n</code></pre>"},{"location":"part2/2.4-Adding-Microservice-Lab-02/#4-api-endpoints-openapi-spec","title":"\ud83d\udd17 4. API Endpoints (OpenAPI Spec)","text":"Method Endpoint Description <p>BasketLines</p> <p>GET /api/baskets/{basketId}/basketlines POST /api/baskets/{basketId}/basketlines GET /api/baskets/{basketId}/basketlines/{basketLineId} PUT /api/baskets/{basketId}/basketlines/{basketLineId} DELETE /api/baskets/{basketId}/basketlines/{basketLineId}</p> <p>Baskets</p> <p>GET  /api/baskets/{basketId} POST  /api/baskets</p>"},{"location":"part2/2.4-Adding-Microservice-Lab-02/#creating-the-shoppingbasket-solution","title":"\ud83d\udee0\ufe0f Creating the ShoppingBasket Solution","text":""},{"location":"part2/2.4-Adding-Microservice-Lab-02/#2-create-the-shopping-basket-web-api-project","title":"\ud83e\uddf1 2. Create the Shopping Basket Web API Project","text":"<pre><code>dotnet new webapi -n EvenTicket.Services.ShoppingBasket --use-controllers -o src/EvenTicket.Services.ShoppingBasket\ndotnet sln add src/EvenTicket.Services.ShoppingBasket/EvenTicket.Services.ShoppingBasket.csproj\ndotnet sln list\n</code></pre> <p>Here we have to pass unnecessary property which events service can be converted into graphql</p>"},{"location":"part2/2.5-Creating-Microservice-Via-grpc-Lab-03/","title":"Creating Microservice with grpc","text":""},{"location":"part2/2.5-Creating-Microservice-Via-grpc-Lab-03/#creating-microservice-via-grpc-discount","title":"\ud83c\udfac Creating Microservice via grpc - <code>Discount</code>","text":"<p>The Shopping Basket Service will be responsible for managing the list of events that users can view and search.</p>"},{"location":"part2/2.5-Creating-Microservice-Via-grpc-Lab-03/#1-responsibilities-of-eventcatalogservice","title":"\ud83e\uddf1 1. Responsibilities of EventCatalogService","text":"Feature Description"},{"location":"part2/2.5-Creating-Microservice-Via-grpc-Lab-03/#2-tech-stack","title":"\u2699\ufe0f 2. Tech Stack","text":"Layer Tech Language C# (.NET 9) Framework ASP.NET Core Web API DB SQL Server API Docs Swagger /Scalar / http / OpenAPI Container Docker ORM EF Core"},{"location":"part2/2.5-Creating-Microservice-Via-grpc-Lab-03/#3-core-models-example","title":"\ud83d\udee0\ufe0f 3. Core Models (Example)","text":"<pre><code>public class Coupon\n{\n    public Guid CouponId { get; set; }\n    public string Code { get; set; }\n    public int Amount { get; set; }\n    public bool AlreadyUsed { get; set; }\n}\n</code></pre>"},{"location":"part2/2.5-Creating-Microservice-Via-grpc-Lab-03/#4-api-endpoints-openapi-spec","title":"\ud83d\udd17 4. API Endpoints (OpenAPI Spec)","text":"Method Endpoint Description <p>BasketLines</p> <p>GET /api/baskets/{basketId}/basketlines POST /api/baskets/{basketId}/basketlines GET /api/baskets/{basketId}/basketlines/{basketLineId} PUT /api/baskets/{basketId}/basketlines/{basketLineId} DELETE /api/baskets/{basketId}/basketlines/{basketLineId}</p> <p>Baskets</p> <p>GET  /api/baskets/{basketId} POST  /api/baskets</p>"},{"location":"part2/2.5-Creating-Microservice-Via-grpc-Lab-03/#creating-the-discount-solution","title":"\ud83d\udee0\ufe0f Creating the Discount Solution","text":""},{"location":"part2/2.5-Creating-Microservice-Via-grpc-Lab-03/#2-create-the-discount-web-api-project","title":"\ud83e\uddf1 2. Create the Discount Web API Project","text":"<pre><code>dotnet new webapi -n EvenTicket.Services.Discount --use-controllers -o src/EvenTicket.Services.Discount\ndotnet sln add src/EvenTicket.Services.Discount/EvenTicket.Services.Discount.csproj\ndotnet sln list\n</code></pre> <pre><code>  &lt;ItemGroup&gt;\n    &lt;Protobuf Include=\"..\\discount.proto\" GrpcServices=\"Server\"&gt;\n      &lt;Link&gt;Protos\\discount.proto&lt;/Link&gt;\n    &lt;/Protobuf&gt;\n  &lt;/ItemGroup&gt;\n</code></pre> <pre><code>&lt;ItemGroup&gt;\n&lt;Protobuf Include=\"..\\discount.proto\" GrpcServices=\"Client\"&gt;\n    &lt;Link&gt;Protos\\discount.proto&lt;/Link&gt;\n&lt;/Protobuf&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <p>postman collection https://universal-sunset-705171.postman.co/workspace/Personal~c89459ae-d13f-4ef4-8063-e204380a69bc/collection/686a750e692ca2c981fdb4dd?action=share&amp;creator=11002687</p> <p>gRPC gRPC (Google Remote Procedure Call) is a high-performance RPC framework developed by Google. It uses Protocol Buffers (Protobuf) for data serialization and supports multiple programming languages. The lowercase \u201cg\u201d signifies that gRPC was developed by Google. It reflects the project\u2019s origins within Google\u2019s infrastructure. RPC stands for Remote Procedure Call, which is a protocol that one program can use to request a service from a program located on another computer in a network. gRPC enables the execution of a function (or procedure) on a remote server, allowing for communication between different systems and services in a network.</p> <p></p> <pre><code>service Discounts {\n    rpc GetCoupon (GetCouponByIdRequest) returns (GetCouponByIdResponse) {}\n}\n\nmessage GetCouponByIdRequest {\n    string CouponId = 1;\n}\n\nmessage GetCouponByIdResponse {\n    Coupon coupon = 1;\n}\n\nmessage Coupon {\n    string CouponId = 1;\n    string Code = 2;\n    int32 Amount = 3;\n    bool AlreadyUsed = 4;\n}\n</code></pre> <p>Service functionality</p> <pre><code>public class DiscountsService(IMapper mapper, ICouponRepository couponRepository) : Discounts.DiscountsBase\n{\n    public override async Task&lt;GetCouponByIdResponse&gt; GetCoupon(GetCouponByIdRequest request, ServerCallContext context)\n    {\n        var response = new GetCouponByIdResponse();\n\n        // ... logic\n\n        return response;\n    }\n}\n</code></pre>"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/","title":"Asynchronous Communication between Microservices","text":""},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#adding-asynchronous-communication","title":"Adding Asynchronous communication","text":"<p>Why Asynchrous communication, befor that will see disadvantages of syncrhrous communication.</p>"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#disadvantages-of-synchronous","title":"Disadvantages of Synchronous","text":"<ul> <li>Tight coupling</li> <li>Bottleneck in system</li> <li>One to many</li> <li>Changes are hard</li> <li>Error difficult to catch</li> </ul> <p>Asynchrous communication will solve a lot of above issue </p> <p></p> <p></p> <p></p> <p></p> <pre><code>dotnet new classlib -n EvenTicket.Infrastructure.Messages -o src/BuildingBlocks/Infrastructure/EvenTicket.Infrastructure.Messages\ndotnet new classlib -n EvenTicket.Infrastructure.MessagingBus -o src/BuildingBlocks/Infrastructure/EvenTicket.Infrastructure.MessagingBus\n\ndotnet sln add src/BuildingBlocks/Infrastructure/EvenTicket.Infrastructure.Messages/EvenTicket.Infrastructure.Messages.csproj\ndotnet sln add src/BuildingBlocks/Infrastructure/EvenTicket.Infrastructure.MessagingBus/EvenTicket.Infrastructure.MessagingBus.csproj\ndotnet sln list\n</code></pre> <p>Ordering service</p> <pre><code>dotnet new webapi -n EvenTicket.Services.Ordering --use-controllers -o src/EvenTicket.Services.Ordering\ndotnet sln add src/EvenTicket.Services.Ordering/EvenTicket.Services.Ordering.csproj\ndotnet sln list\n</code></pre> <p></p>"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#event-and-messages","title":"Event and messages","text":""},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#what-is-an-event","title":"What is an Event?","text":"<p>An event is a fact or thing that has happened in a system.</p> <p>It's a record of something that occurred in the past.</p>"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#example","title":"Example:","text":"<ul> <li>\"OrderPlaced\"</li> <li>\"UserRegistered\"</li> <li>\"PaymentFailed\"</li> </ul> <p>These are immutable, meaning once they happen, they don\u2019t change.</p>"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#what-is-a-message","title":"What is a Message?","text":"<p>A message is a piece of data sent from one service to another to communicate something \u2014 and it may contain an event.</p> <p>Messages are how services talk to each other \u2014 either by sending commands or publishing events.</p>"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#types-of-messages","title":"Types of Messages:","text":"<ul> <li>Event message \u2013 \u201cAn order was placed.\u201d</li> <li>Command message \u2013 \u201cCreate an invoice.\u201d</li> <li>Query message \u2013 \u201cGet order status.\u201d</li> </ul>"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#event-vs-message-side-by-side","title":"Event vs Message (Side by Side)","text":"Aspect Event Message What it is A record of something that happened A communication between services Direction Usually one-way (publish) One-way or request-response Example \"OrderPlaced\" \"CreateInvoiceCommand\" Nature Passive (just notifies) Active (asks for something)"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#summary","title":"Summary:","text":"<ul> <li>An event says: \u201cSomething happened.\u201d</li> <li>A message says: \u201cHere\u2019s some info for you.\u201d</li> </ul> <p>In event-driven systems, services emit events and consume events using messages.</p>"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#different-options-for-event-driven-arch","title":"Different options for event driven arch","text":"<ul> <li>Azure service bus</li> <li>RabbitMQ and other</li> </ul>"},{"location":"part2/2.6-Adding-Asynchronous-Communication-Lab-04/#setting-up-azure-service-bus","title":"Setting up Azure service bus","text":"<p>check deployment folder</p>"},{"location":"part2/2.7-Adding-Background-service-Lab-05/","title":"Background Service","text":""},{"location":"part2/2.7-Adding-Background-service-Lab-05/#adding-background-service","title":"Adding Background service","text":""},{"location":"part2/2.7-Adding-Background-service-Lab-05/#adding-payment-service","title":"Adding payment service","text":""},{"location":"part2/2.7-Adding-Background-service-Lab-05/#data-flow","title":"Data flow","text":"<p>Create Payment service</p> <pre><code>dotnet new webapi -n EvenTicket.Services.Payment --use-controllers -o src/Services/EvenTicket.Services.Payment\n\ndotnet sln add src/Services/EvenTicket.Services.Payment/EvenTicket.Services.Payment.csproj\n\n\n\ndotnet new webapi -n External.PaymentGateway --use-controllers -o src/Fake/External.PaymentGateway\n\ndotnet sln add src/Fake/External.PaymentGateway/External.PaymentGateway.csproj\n\ndotnet sln list\n</code></pre>"},{"location":"part2/2.7-Adding-Background-service-Lab-05/#high-level-use-case","title":"High-Level Use Case","text":"<ol> <li>Order Service \u2192 sends a message to OrderPaymentRequestTopic requesting payment.</li> <li> <p>This ServiceBusListener picks up the message:</p> </li> <li> <p>Reads order &amp; card details.</p> </li> <li>Calls the payment gateway to process the payment.</li> <li>Marks the message as completed.</li> <li>Publishes the payment result to OrderPaymentUpdatedTopic, which other services (like Order Service) can consume to update the order status.</li> </ol>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/","title":"Resilience in Microservice","text":""},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#28-making-microservices-more-resilient","title":"2.8-Making-Microservices-more-resilient","text":"<p>In microservices architecture, the term resilient (or resilience) refers to a system's ability to withstand failures, recover quickly, and continue functioning correctly even when some of its components fail or face unexpected issues.</p> <p>Because microservices are distributed systems, failures are inevitable\u2014network issues, service crashes, slow responses, or resource exhaustion can happen. A resilient microservice ensures that these failures do not cascade and bring down the entire system.</p> <p></p> <p></p>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#common-issues","title":"Common issues","text":""},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#improving-service-resiliency","title":"Improving service resiliency","text":"<ul> <li>Asynchronous communication</li> <li>Retry with expoental backoff <ul> <li>Automatically retry failed requests with exponential backoff.</li> </ul> </li> <li>Circuit Breaker Pattern</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#what-is-circuit-breaker-pattern","title":"What is Circuit Breaker Pattern?","text":"<p>The Circuit Breaker Pattern is a resilience pattern in microservices that stops repeatedly calling a failing service and allows it time to recover.</p> <p>Think of it like an electric circuit breaker in your house:</p> <ul> <li>When there\u2019s a problem (short circuit) \u2192 Breaker trips (opens) \u2192 Stops electricity flow to protect the system.</li> <li>After some time, it tries again to see if the problem is fixed.</li> </ul> <p>In microservices:</p> <ul> <li>If Service A keeps calling Service B, and B keeps failing or is too slow, the circuit breaker \u201copens\u201d and stops requests to B for a while.</li> <li>This prevents overloading B and frees up A to handle other requests.</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#how-it-works-3-states","title":"How It Works (3 States)","text":"<ol> <li> <p>Closed (Normal) </p> </li> <li> <p>Calls are working fine.</p> </li> <li> <p>Service A \u2192 Service B works normally.</p> </li> <li> <p>Open (Problem Detected) </p> </li> <li> <p>Too many failures happen.</p> </li> <li>Circuit \u201copens\u201d and stops sending requests to B.</li> <li> <p>A can fallback instead (e.g., show cached data).</p> </li> <li> <p>Half-Open (Testing)</p> </li> <li> <p>After some wait time, the breaker allows a few test requests to B.</p> </li> <li>If B responds successfully \u2192 Circuit closes (back to normal).</li> <li>If B still fails \u2192 Circuit stays open longer.</li> </ol>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#simple-real-world-example","title":"Simple Real-World Example","text":"<ul> <li>Order Service \u2192 Payment Service</li> <li>Payment Service is down.</li> <li> <p>If we keep calling it, it will:</p> </li> <li> <p>Waste network resources</p> </li> <li>Slow down Order Service</li> <li>Possibly crash the whole app</li> </ul> <p>With Circuit Breaker:</p> <ul> <li>After 3 continuous payment failures \u2192 Breaker opens.</li> <li>Order Service stops calling Payment Service for 30 seconds.</li> <li>It marks orders as \u201cPayment Pending\u201d instead (fallback).</li> <li>After 30 seconds \u2192 It sends one test request to Payment Service.</li> <li>If success \u2192 Back to normal.</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#benefits","title":"Benefits","text":"<ul> <li>Prevents cascading failures</li> <li>Protects resources</li> <li>Gives time for failing service to recover</li> <li>Improves user experience with fallbacks</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#what-is-retry-pattern","title":"What is Retry Pattern?","text":"<p>The Retry Pattern is a resilience pattern where your service automatically tries again when a request to another service fails due to a temporary problem.</p> <p>Think of it like calling your friend on the phone:</p> <ul> <li>If the call doesn\u2019t connect (network issue),</li> <li>You wait a little and try again,</li> <li>Usually, the call works on the second or third try.</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#how-it-works","title":"How It Works","text":"<ol> <li>Service A calls Service B.</li> <li> <p>If the request fails due to a temporary issue (like timeout, network glitch):</p> </li> <li> <p>Service A waits a bit</p> </li> <li>Then retries the request</li> <li>If it succeeds, all good.</li> <li>If it keeps failing after multiple retries, you can stop and fallback.</li> </ol>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#important-things","title":"Important Things","text":"<ul> <li> <p>Don\u2019t retry immediately \u2192 use Exponential Backoff:</p> </li> <li> <p>1st retry after 1 second</p> </li> <li>2nd retry after 2 seconds</li> <li>3rd retry after 4 seconds</li> <li>Don\u2019t retry forever \u2192 Set a max retry count.</li> <li>Combine with Circuit Breaker to avoid overloading a failing service.</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#real-world-example","title":"Real-World Example","text":"<p>Imagine Order Service \u2192 Payment Service:</p> <ol> <li>Payment Service is temporarily slow due to high traffic.</li> <li>Order Service calls Payment API \u2192 Timeout.</li> <li> <p>Retry Pattern says:</p> </li> <li> <p>Wait 1 second \u2192 Retry</p> </li> <li>If still fails \u2192 Wait 2 seconds \u2192 Retry again</li> <li>If succeeds \u2192 Payment completed \u2705</li> <li>If fails after 3 tries \u2192 Fallback to \u201cPayment Pending\u201d \u274c</li> </ol>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#benefits_1","title":"Benefits","text":"<ul> <li>Handles temporary failures automatically</li> <li>Reduces unnecessary errors to users</li> <li>Works well with transient network issues</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#common-problems-using-httpclient","title":"Common Problems Using HttpClient","text":""},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#1-socket-exhaustion","title":"1. Socket Exhaustion","text":"<ul> <li>If you create a new <code>HttpClient</code> object for every request, it does not immediately release the TCP connection.</li> <li>Each <code>HttpClient</code> instance opens a new socket.</li> <li> <p>In high-traffic apps, this leads to:</p> </li> <li> <p>Too many open sockets</p> </li> <li>System.Net.Sockets.SocketException: Address already in use</li> <li>This is called socket exhaustion.</li> </ul> <p>Example of bad usage:</p> <pre><code>public async Task&lt;string&gt; CallServiceAsync()\n{\n    using var client = new HttpClient(); // Creating per request\n    return await client.GetStringAsync(\"https://example.com/api/data\");\n}\n</code></pre> <ul> <li>Each call creates a new socket, which stays in TIME_WAIT state after disposal.</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#2-dns-changes-are-ignored","title":"2. DNS Changes Are Ignored","text":"<ul> <li>Old <code>HttpClient</code> instances cache DNS lookups.</li> <li>If the server IP changes (like in Kubernetes or cloud deployments), your client might still call the old IP, causing failures.</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#3-performance-overhead","title":"3. Performance Overhead","text":"<ul> <li>Continuously creating and disposing <code>HttpClient</code> objects is expensive.</li> <li>It wastes memory and CPU by repeatedly creating TCP connections instead of reusing them.</li> </ul>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#correct-way-to-use-httpclient","title":"Correct Way to Use HttpClient","text":""},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#1-use-a-single-static-httpclient","title":"1. Use a Single Static HttpClient","text":"<ul> <li>Create one <code>HttpClient</code> instance and reuse it for the entire app lifetime.</li> </ul> <pre><code>public class MyService\n{\n    private static readonly HttpClient _httpClient = new HttpClient(); // Reused\n\n    public async Task&lt;string&gt; CallServiceAsync()\n    {\n        return await _httpClient.GetStringAsync(\"https://example.com/api/data\");\n    }\n}\n</code></pre>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#2-use-httpclientfactory","title":"2. Use HttpClientFactory","text":"<ul> <li>Introduced in .NET Core 2.1 to solve these problems.</li> <li> <p>Benefits:</p> </li> <li> <p>Manages connection pooling automatically</p> </li> <li>Avoids socket exhaustion</li> <li>Supports DNS refresh</li> <li>Easy to configure retries, circuit breakers with Polly</li> </ul> <p>Example using <code>IHttpClientFactory</code>:</p> <pre><code>// Program.cs or Startup.cs\nbuilder.Services.AddHttpClient(\"MyApiClient\");\n\n// Usage in service\npublic class MyService\n{\n    private readonly HttpClient _client;\n\n    public MyService(IHttpClientFactory factory)\n    {\n        _client = factory.CreateClient(\"MyApiClient\");\n    }\n\n    public async Task&lt;string&gt; CallServiceAsync()\n    {\n        return await _client.GetStringAsync(\"https://example.com/api/data\");\n    }\n}\n</code></pre>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#summary-of-problems","title":"Summary of Problems","text":"<ol> <li>Socket exhaustion \u2013 too many short-lived connections</li> <li>DNS refresh issues \u2013 can fail in cloud/microservices</li> <li>Performance issues \u2013 creating/discarding <code>HttpClient</code> is expensive</li> </ol> <p>Solution \u2192 Use <code>HttpClientFactory</code> with Polly for retries, circuit breakers, and timeouts.</p>"},{"location":"part2/2.8-Making-Microservices-more-resilient-Lab-06/#example","title":"Example","text":"<p>call this endpoint for retry logic <pre><code>/api/paymentapprover/error\n</code></pre></p> <p>Implement in ExternalGatewayPaymentService.cs file</p> <pre><code>    public async Task&lt;bool&gt; PerformPayment(PaymentInfo paymentInfo)\n    {\n        try\n        {\n            var client = _httpClientFactory.CreateClient(\"ExternalGateway\");\n            var dataAsString = JsonSerializer.Serialize(paymentInfo);\n            var content = new StringContent(dataAsString);\n            content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");\n\n            var response = await client.PostAsync(\n                _configuration.GetValue&lt;string&gt;(\"ApiConfigs:ExternalPaymentGateway:Uri\") + \"/api/paymentapprover\",\n                content);\n\n            if (!response.IsSuccessStatusCode)\n                throw new ApplicationException($\"Something went wrong calling the API: {response.ReasonPhrase}\");\n\n            var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);\n\n            return JsonSerializer.Deserialize&lt;bool&gt;(responseString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n        }\n        catch (BrokenCircuitException ex)\n        {\n            // Handle circuit breaker open state\n            throw new ApplicationException(\"Payment service is temporarily unavailable due to repeated errors. Please try again later.\", ex);\n        }\n    }\n</code></pre>"},{"location":"part2/2.9-API%20Gateway%20With%20YARP%20Reverse%20Proxy-Lab-07/","title":"2.9 API Gateway With YARP Reverse Proxy Lab 07","text":""},{"location":"part2/2.9-API%20Gateway%20With%20YARP%20Reverse%20Proxy-Lab-07/#29-api-gateway-with-yarp-reverse-proxy","title":"2.9-API Gateway With YARP Reverse Proxy","text":"<p>API Gateways with YARP (Yet Another Reverse Proxy) Reverse Proxy applying Gateway Routing Pattern</p>"},{"location":"part2/2.9-API%20Gateway%20With%20YARP%20Reverse%20Proxy-Lab-07/#what-is-an-api-gateway","title":"What is an API Gateway?","text":"<p>API gateways are a crucial component in the architecture of microservice applications.</p> <p>They act as a reverse proxy, routing incoming requests to the appropriate backend service and abstracting the underlying implementation details from the client.</p> <p>One of the primary benefits of using an API gateway is the ability to manage and optimize the communication between different services, particularly when it comes to:</p> <ul> <li>Security</li> <li>Caching</li> <li>Rate limiting</li> </ul> <p>It also provides a single endpoint for external clients to access, simplifying the integration process and minimizing the number of round trips required to retrieve data.</p> <p>Some popular tools that can serve as API Gateways are:</p> <ul> <li>YARP</li> <li>Ocelot</li> <li>Traefik</li> <li>Envoy</li> </ul> <p></p> <p>There are also cloud gateways such as Azure API Gateway and Amazon API Gateway.</p>"},{"location":"part2/2.9-API%20Gateway%20With%20YARP%20Reverse%20Proxy-Lab-07/#whats-the-difference-between-an-api-gateway-and-a-reverse-proxy","title":"What's The Difference Between an API Gateway And a Reverse Proxy?","text":""},{"location":"part2/2.9-API%20Gateway%20With%20YARP%20Reverse%20Proxy-Lab-07/#reverse-proxy","title":"Reverse proxy","text":"<p>A reverse proxy and an API gateway are similar concepts, but they serve different purposes.</p> <p>A reverse proxy acts as an intermediary between clients and servers. The clients can only call the backend servers through the reverse proxy, which forwards the request to the appropriate server. It hides the implementation details of individual servers inside the internal network.</p> <p>A reverse proxy is commonly used for:</p> <ul> <li>Load balancing</li> <li>Caching</li> <li>Security</li> <li>SSL termination</li> </ul>"},{"location":"part2/2.9-API%20Gateway%20With%20YARP%20Reverse%20Proxy-Lab-07/#api-gateway","title":"API gateway","text":"<p>An API gateway is a specific type of reverse proxy designed for managing APIs. It acts as a single entry point for API consumers to the various backend services.</p> <p>The key characteristics of an API gateway are:</p> <ul> <li>Request routing and composition</li> <li>Request/response transformations</li> <li>Authentication and authorization</li> <li>Rate limiting</li> <li>Monitoring</li> </ul> <p>Also, note that an API gateway can perform load balancing and other functionalities mentioned for reverse proxies.</p> <p>Now let's see how to use a reverse proxy to implement an API gateway.</p>"},{"location":"part2/2.9-API%20Gateway%20With%20YARP%20Reverse%20Proxy-Lab-07/#microsoft-reverse-proxy-yarp","title":"Microsoft Reverse Proxy: YARP","text":"<p>YARP is a lightweight, highly customizable reverse proxy solution developed by Microsoft, tailored for .NET applications. Designed to integrate seamlessly with .NET Core, making it easy to add to existing .NET projects. Simplify the routing of requests to different backend services, offering capabilities for request transformation, load balancing, and more.</p> <p>YARP is not just another reverse proxy; it\u2019s a testament to Microsoft\u2019s commitment to open-source and .NET excellence. It\u2019s designed to be lightweight, adaptable, and, most importantly, developer-friendly</p> <p></p>"},{"location":"part2/2.9-API%20Gateway%20With%20YARP%20Reverse%20Proxy-Lab-07/#key-features-of-yarp","title":"Key Features of YARP","text":"<ul> <li>Customizable Routing: Direct traffic with pinpoint accuracy.</li> <li>Cross-Platform Freedom: Works seamlessly across Windows, Linux, and macOS.</li> <li>Protocol Prowess: Embraces gRPC, HTTP/2, and WebSockets for modern * applications.</li> <li>Performance: Built for speed and efficiency, ensuring low latency and * high throughput.</li> <li>Health Checks &amp; Load Balancing: Keeps your services healthy and balanced.</li> </ul>"},{"location":"part2/2.9-API%20Gateway%20With%20YARP%20Reverse%20Proxy-Lab-07/#exposing-microservices-through-yarp-rest-api-endpoints","title":"Exposing Microservices through YARP REST API Endpoints","text":"<p>Imagine YARP as the gateway that presents the diverse functionalities of our microservices under a unified front. It simplifies the client\u2019s interaction by providing a single point of contact for various backend services. YARP will expose with microservices with putting microservice name as a prefix of internal uri\u2019s.</p> <p>Put microservice name as a prefix of internal uri\u2019s ```plain text {microservice_name}/{microservice_internal_url} <pre><code>Microservices |  Local Env\n|---|---|\nEvent Catalog | https://localhost:5050\nShopping basket | https://localhost:5051\nDiscount | https://localhost:5052\nOrdering | https://localhost:5053\nPayment | https://localhost:5054\nExternal Payment Gateway | https://localhost:5055\nAPI Gateway | https://localhost:5056\n\n\nMicroservices |  Local Env | Docker Env | Docker Inside\n|---|---|---|---|\nEvent Catalog  |  5000-5050 | 6000-6050 |8080-8081 |\nShopping  |  5001-5051 | 6001-6051 |8080-8081 |\nDiscount  |  5002-5052 | 6002-6052 |8080-8081 |\nOrdering  |  5003-5053 | 6003-6053 |8080-8081 |\nPayment   |  5004-5054 | 6004-6054 |8080-8081 |\nExternal Payment   |  5005-5055 | 6005-6055 |8080-8081 |\nAPI Gateway   |  5006-5056 | 6006-6056 |8080-8081 |\n\n### Project Folder Structure of YarpApiGateway\n* Program.cs: Entry point of the application where Yarp and other services are configured.\n* appsettings.json: Contains all the routing configurations for the microservices.\n\n\n### Getting started\n</code></pre> dotnet new webapi -n EvenTicket.Gateways.WebAPI --use-controllers -o src/Gateways/EvenTicket.Gateways.WebAPI</p> <p>dotnet sln add src/Gateways/EvenTicket.Gateways.WebAPI/EvenTicket.Gateways.WebAPI.csproj ```</p> <p>https://localhost:5056/ordering-service/api/order/user/920AC5CC-EE22-4135-8306-29C3789B5D58</p>"}]}